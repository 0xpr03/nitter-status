//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use chrono::Utc;
use sea_orm::{entity::prelude::*, ActiveValue};
use sea_query::{OnConflictUpdate, OnConflict};
use serde::Serialize;

pub const KIND_VERIFICATION: i32 = 1;
pub const KIND_ALERT: i32 = 2;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "last_mail_send")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub mail: String,
    pub kind: i32,
    pub time: i64,
}

impl Model {
    pub async fn update_last_send<T>(db: &T, mail: String, kind: i32) -> std::result::Result<(),sea_orm::DbErr>
    where T: ConnectionTrait {
        Entity::insert(ActiveModel {
            mail: ActiveValue::Set(mail),
            kind: ActiveValue::Set(kind),
            time: ActiveValue::Set(Utc::now().timestamp()),
        }).on_conflict(OnConflict::columns([Column::Mail,Column::Kind])
        .update_column(Column::Time).to_owned()).exec(db).await?;
        Ok(())
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
