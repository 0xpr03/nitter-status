//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "host")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub domain: String,
    pub url: String,
    pub enabled: bool,
    pub rss: bool,
    pub version: Option<String>,
    /// Last time the url and enabled were updated, *not* the rss
    pub updated: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::update_check::Entity")]
    UpdateCheck,
}

impl Related<super::update_check::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UpdateCheck.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
