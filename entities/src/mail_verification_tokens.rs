//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use chrono::{Utc, TimeZone};
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "mail_verification_tokens")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub host: i32,
    pub known_part: String,
    pub secret_part: String,
    pub mail: String,
    pub eol_date: i64,
}

impl Model {
    pub fn is_outdated(&self) -> bool {
        let timestamp = Utc.timestamp_opt(self.eol_date,0).unwrap();
        Utc::now() > timestamp
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::host::Entity",
        from = "Column::Host",
        to = "super::host::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Host,
}

impl Related<super::host::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Host.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
